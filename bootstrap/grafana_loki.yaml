apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: grafana-loki
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://grafana.github.io/helm-charts
    chart: loki
    targetRevision: 2.10.2
    helm:
      values: |
        loki:
          schemaConfig:
            configs:
              - from: "2024-04-01"
                store: tsdb
                object_store: s3
                schema: v13
                index:
                  prefix: loki_index_
                  period: 24h
          storage_config:
            aws:
              region: us-west-2
              bucketnames: loki-log-chunks-d3vde8
              s3forcepathstyle: false
          ingester:
            chunk_encoding: snappy
          pattern_ingester:
            enabled: true
          limits_config:
            allow_structured_metadata: true
            volume_enabled: true
            retention_period: 672h
          compactor:
            retention_enabled: true
            delete_request_store: s3
          ruler:
            enable_api: true
            storage:
              type: s3
              s3:
                region: us-west-2
                bucketnames: loki-alert-rules-d3vde8
                s3forcepathstyle: false
              alertmanager_url: http://prom:9093
          querier:
            max_concurrent: 4
          storage:
            type: s3
            bucketNames:
              chunks: "loki-log-chunks-d3vde8"
              ruler: "loki-alert-rules-d3vde8"
            s3:
              region: us-west-2
        serviceAccount:
          create: true
          name: loki
          annotations:
            "eks.amazonaws.com/role-arn": "arn:aws:iam::905418146175:role/loki-service-account-role"
        deploymentMode: Distributed
        rbac:
          pspEnabled: false
        ingester:
          replicas: 1
          persistence:
            storageClass: gp3
            accessModes:
              - ReadWriteOnce
            size: 1Gi
        querier:
          replicas: 1
          maxUnavailable: 1
          persistence:
            storageClass: gp3
            accessModes:
              - ReadWriteOnce
            size: 1Gi
        queryFrontend:
          replicas: 1
          maxUnavailable: 1
        queryScheduler:
          replicas: 1
        distributor:
          replicas: 1
          maxUnavailable: 1
        compactor:
          replicas: 1
          persistence:
            storageClass: gp3
            accessModes:
              - ReadWriteOnce
            size: 1Gi
        indexGateway:
          replicas: 1
          maxUnavailable: 1
          persistence:
            storageClass: gp3
            accessModes:
              - ReadWriteOnce
            size: 1Gi
        ruler:
          replicas: 1
          maxUnavailable: 1
          persistence:
            storageClass: gp3
            accessModes:
              - ReadWriteOnce
            size: 1Gi
        gateway:
          enabled: false
        ingress:
          enabled: true
          name: loki-ingress
          annotations:
            alb.ingress.kubernetes.io/scheme: internet-facing
            alb.ingress.kubernetes.io/ingress.class: alb
            alb.ingress.kubernetes.io/target-type: ip
            alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
          paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: grafana-loki
                  port:
                    number: 3100
        lokiCanary:
          extraArgs:
            - -pass=$(LOKI_PASS)
            - -user=$(LOKI_USER)
          extraEnv:
            - name: LOKI_PASS
              valueFrom:
                secretKeyRef:
                  name: canary-loki-auth
                  key: password
            - name: LOKI_USER
              valueFrom:
                secretKeyRef:
                  name: canary-loki-auth
                  key: username

  destination:
    namespace: loki
    server: https://kubernetes.default.svc
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

